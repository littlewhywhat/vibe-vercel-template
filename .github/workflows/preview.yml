name: Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - run: corepack enable
      - run: pnpm install --frozen-lockfile
      - run: pnpm run ci
      - run: pnpm dlx vercel pull --yes --environment=preview --token ${{ secrets.VERCEL_TOKEN }}
      - run: pnpm dlx vercel build --token ${{ secrets.VERCEL_TOKEN }}
      - id: deploy
        run: |
          URL=$(pnpm dlx vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$URL" >> $GITHUB_OUTPUT
      - uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.deploy.outputs.preview_url }}
        with:
          script: |
            const marker = '<!-- vercel-preview-link -->';
            const url = process.env.PREVIEW_URL;
            const body = `${marker}
âœ… Preview deployed:
**${url}**

Health: \`${url}/api/health\`

Commit: \`${context.sha}\``;
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });
            const existing = comments.find((c) => c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body,
              });
            }
